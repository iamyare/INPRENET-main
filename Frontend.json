{
  "INPRENET-FRONTEND": {
    "src": {
      "app": {
        "app-routing.module.ts": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AdminLayoutComponent } from './modulos/admin/admin-layout/admin-layout.component';\nimport { DashboardAdminComponent } from './modulos/admin/dashboard-admin/dashboard-admin.component';\nimport { UserManagementComponent } from './modulos/admin/user-management/user-management.component';\nimport { AddAdminComponent } from './modulos/admin/add-admin/add-admin.component';\nimport { MainLayoutComponent } from './components/main-layout/main-layout.component';\nimport { EditarPerfilComponent } from './modulos/auth/editar-perfil/editar-perfil.component';\nimport { LoginComponent } from './modulos/auth/login/login.component';\nimport { LoginPrivadosComponent } from './modulos/auth/login-privados/login-privados.component';\nimport { OlvidoContrasenaComponent } from './modulos/auth/olvido-contrasena/olvido-contrasena.component';\nimport { RestablecerContrasenaComponent } from './modulos/auth/restablecer-contrasena/restablecer-contrasena.component';\nimport { RegisterComponent } from './modulos/auth/register/register.component';\nimport { LandingPageComponent } from './components/landing-page/landing-page.component';\nimport { PagenotfoundComponent } from './components/pagenotfound/pagenotfound.component';\nimport { AuthGuard } from './guards/auth.guard';\n\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent, pathMatch: 'full' },\n  { path: 'login-privados', component: LoginPrivadosComponent, pathMatch: 'full' },\n  { path: 'solicitud-restablecimiento', component: OlvidoContrasenaComponent, pathMatch: 'full' },\n  { path: 'restablecer-contrasena/:token', component: RestablecerContrasenaComponent, pathMatch: 'full' },\n  { path: 'register', component: RegisterComponent, pathMatch: 'full' },\n  { path: 'pagenotfound', component: PagenotfoundComponent, pathMatch: 'full' },\n  {\n    path: 'admin',\n    component: AdminLayoutComponent,\n    children: [\n      { path: 'dashboard-admin', component: DashboardAdminComponent },\n      { path: 'user-management', component: UserManagementComponent },\n      { path: 'add-admin', component: AddAdminComponent },\n      //{ path: '', redirectTo: 'dashboard-admin', pathMatch: 'full' }\n    ]\n  },\n  {\n    path: 'home',\n    component: MainLayoutComponent,\n    canActivate: [AuthGuard],\n    children: [\n      {\n        path: 'afiliacion',\n        loadChildren: () => import('./modulos/afiliacion/afiliacion.module').then(m => m.AfiliacionModule),\n      },\n      {\n        path: 'planilla',\n        loadChildren: () => import('./modulos/planilla/planilla.module').then(m => m.PlanillaModule),\n      },\n      {\n        path: 'gestion',\n        loadChildren: () => import('./modulos/admin/admin.module').then(m => m.AdminModule),\n      },\n      {\n        path: 'menu',\n        loadChildren: () => import('./views/views.module').then(m => m.ViewsModule),\n      },\n      {\n        path: 'escalafon',\n        loadChildren: () => import('./modulos/escalafon/escalafon.module').then(m => m.EscalafonModule),\n      },\n      {\n        path: 'conasa',\n        loadChildren: () => import('./modulos/conasa/conasa.module').then(m => m.ConasaModule),\n      },\n      {\n        path: 'documentos',\n        loadChildren: () => import('./modulos/documentos/documentos.module').then(m => m.DocumentosModule),\n      },\n      { path: 'usuario/editar', component: EditarPerfilComponent },\n    ]\n  },\n  { path: '**', component: LandingPageComponent, pathMatch: 'full' },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
        "app.component.ts": "import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from './services/auth.service';// Asegúrate de tener la ruta correcta\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  title = 'INPRENET';\r\n\r\n  constructor(private authService: AuthService) { }\r\n\r\n  ngOnInit(): void {\r\n    // Este método se llama después de que el componente se inicializa.\r\n    // No es necesario agregar contenido adicional aquí porque el constructor de AuthService\r\n    // ya inicializa el monitoreo de inactividad.\r\n    this.authService.startIdleWatch(); // Asegate de que el monitoreo se inicie\r\n  }\r\n}\r\n",
        "app.module.ts": "import { LOCALE_ID, NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { AfiliacionModule } from './modulos/afiliacion/afiliacion.module';\r\nimport { MaterialAngularModule } from './material-angular/material-angular.module';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { PlanillaModule } from './modulos/planilla/planilla.module';\r\nimport { AuthModule } from './modulos/auth/auth.module';\r\nimport { ComponentsModule } from './components/components.module';\r\nimport { AdminModule } from './modulos/admin/admin.module';\r\nimport { SidenavService } from './services/sidenav.service';\r\nimport { TokenInterceptor } from './interceptors/token.interceptor';\r\nimport { EscalafonModule } from './modulos/escalafon/escalafon.module';\r\nimport { ConasaModule } from './modulos/conasa/conasa.module';\r\nimport { DocumentosModule } from './modulos/documentos/documentos.module';\r\n\r\nimport { registerLocaleData } from '@angular/common';\r\nimport localeEs from '@angular/common/locales/es';\r\n\r\nconst hondurasLocale = { ...localeEs } as any;\r\n\r\n// Ajusta el formato de números (índice 3)\r\nhondurasLocale[3] = [\r\n  ',',  // Separador de miles\r\n  '.',  // Separador decimal\r\n  ';',  // Separador de listas (opcional, puedes dejarlo igual)\r\n];\r\n\r\n// Registra la configuración personalizada\r\nregisterLocaleData(hondurasLocale, 'es-HN');\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    BrowserAnimationsModule,\r\n    MaterialAngularModule,\r\n    AfiliacionModule,\r\n    PlanillaModule,\r\n    AuthModule,\r\n    EscalafonModule,\r\n    ComponentsModule,\r\n    ReactiveFormsModule,\r\n    AdminModule,\r\n    FormsModule,\r\n    ConasaModule,\r\n    DocumentosModule,\r\n    ToastrModule.forRoot({\r\n      timeOut: 10000,\r\n      positionClass: 'toast-bottom-right',\r\n      preventDuplicates: true,\r\n    }),\r\n  ],\r\n  providers: [SidenavService,\r\n    { provide: HTTP_INTERCEPTORS, useClass: TokenInterceptor, multi: true },\r\n    { provide: LOCALE_ID, useValue: 'es-HN' }\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
        "guards": {
          "auth.guard.spec.ts": "import { TestBed } from '@angular/core/testing';\nimport { CanActivateFn } from '@angular/router';\n\nimport { authGuard } from './auth.guard';\n\ndescribe('authGuard', () => {\n  const executeGuard: CanActivateFn = (...guardParameters) => \n      TestBed.runInInjectionContext(() => authGuard(...guardParameters));\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({});\n  });\n\n  it('should be created', () => {\n    expect(executeGuard).toBeTruthy();\n  });\n});\n",
          "auth.guard.ts": "import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(): boolean {\n    if (this.authService.isAuthenticated()) {\n      return true;\n    } else {\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\n",
          "role-guard.guard.spec.ts": "import { TestBed } from '@angular/core/testing';\nimport { CanActivateFn } from '@angular/router';\n\nimport { roleGuardGuard } from './role-guard.guard';\n\ndescribe('roleGuardGuard', () => {\n  const executeGuard: CanActivateFn = (...guardParameters) => \n      TestBed.runInInjectionContext(() => roleGuardGuard(...guardParameters));\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({});\n  });\n\n  it('should be created', () => {\n    expect(executeGuard).toBeTruthy();\n  });\n});\n",
          "role-guard.guard.ts": "import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoleGuard implements CanActivate {\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private toastr: ToastrService\n  ) {}\n\n  canActivate(route: ActivatedRouteSnapshot): boolean {\n    const expectedRolesModules = route.data['expectedRolesModules'] as Array<{ role?: string, module?: string }>;\n    const rolesModulos = this.authService.getUserRolesAndModules();\n    const hasGlobalAccess = rolesModulos.some((rm: any) => rm.rol === 'TODO' && rm.modulo === 'TODO');\n    if (hasGlobalAccess) {\n      return true;\n    }\n    const hasAccess = expectedRolesModules.some(expected => {\n      if (expected.role && expected.module) {\n        return rolesModulos.some((rm: any) => rm.rol === expected.role && rm.modulo === expected.module);\n      } else if (expected.role) {\n        return rolesModulos.some((rm: any) => rm.rol === expected.role);\n      } else if (expected.module) {\n        return rolesModulos.some((rm: any) => rm.modulo === expected.module);\n      }\n      return false;\n    });\n\n    if (!hasAccess) {\n      this.router.navigate(['/auth/login']);\n      this.toastr.warning('Acceso denegado. Redirigiendo al inicio de sesión.', 'Advertencia', {\n        timeOut: 3000,\n        positionClass: 'toast-top-center'\n      });\n      return false;\n    }\n\n    return true;\n  }\n\n}\n"
        },
        "interceptors": {
          "token.interceptor.ts": "import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AuthService } from '../services/auth.service';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private toastr: ToastrService\n  ) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const accessToken = sessionStorage.getItem('token');\n    let request = req;\n    if (accessToken) {\n      request = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n    }\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.status === 401) {\n          if (this.router.url !== '/login') {\n            this.authService.logout();\n            this.toastr.info('Sesión cerrada');\n            this.router.navigate(['/login']);\n          }\n        }\n        return throwError(error);\n      })\n    );\n  }\n}\n"
        },
        "modulos": {
          "auth": {
            "auth-routing.module.ts": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { LoginPrivadosComponent } from './login-privados/login-privados.component';\nimport { OlvidoContrasenaComponent } from './olvido-contrasena/olvido-contrasena.component';\nimport { RegisterComponent } from './register/register.component';\nimport { RestablecerContrasenaComponent } from './restablecer-contrasena/restablecer-contrasena.component';\nimport { LandingPageComponent } from 'src/app/components/landing-page/landing-page.component';\n\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent },\n  { path: 'login-privados', component: LoginPrivadosComponent },\n  { path: 'solicitud-restablecimiento', component: OlvidoContrasenaComponent },\n  { path: 'restablecer-contrasena/:token', component: RestablecerContrasenaComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'landing-page', component: LandingPageComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthModuleRoutingModule { }\n",
            "auth.module.ts": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MaterialAngularModule } from 'src/app/material-angular/material-angular.module';\nimport { ComponentsModule } from 'src/app/components/components.module';\nimport { LoginComponent } from './login/login.component';\nimport { LoginPrivadosComponent } from './login-privados/login-privados.component';\nimport { OlvidoContrasenaComponent } from './olvido-contrasena/olvido-contrasena.component';\nimport { PreRegisterComponent } from './pre-register/pre-register.component';\nimport { RegisterComponent } from './register/register.component';\nimport { RestablecerContrasenaComponent } from './restablecer-contrasena/restablecer-contrasena.component';\nimport { AuthModuleRoutingModule } from './auth-routing.module';\nimport { EditarPerfilComponent } from './editar-perfil/editar-perfil.component';\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    LoginPrivadosComponent,\n    OlvidoContrasenaComponent,\n    PreRegisterComponent,\n    RegisterComponent,\n    RestablecerContrasenaComponent,\n    EditarPerfilComponent\n  ],\n  imports: [\n    CommonModule,\n    MaterialAngularModule,\n    ComponentsModule,\n    AuthModuleRoutingModule\n  ]\n})\nexport class AuthModule { }\n",
            "editar-perfil": {
              "editar-perfil.component.html": "<div class=\"container\">\n  <h2>Editar Perfil</h2>\n\n  <div class=\"perfil-imagenes\">\n    <!-- Foto de perfil -->\n    <div class=\"image-container foto-empleado\">\n      <label for=\"fotoEmpleado\" class=\"image-label\">Foto de Perfil</label>\n      <img *ngIf=\"fotoEmpleadoUrl\" [src]=\"fotoEmpleadoUrl\" alt=\"Foto del Empleado\">\n      <button class=\"edit-button\" (click)=\"editarArchivo('fotoEmpleado')\">\n        <mat-icon>edit</mat-icon>\n      </button>\n      <input\n        id=\"fotoEmpleado\"\n        type=\"file\"\n        (change)=\"onFileChange($event, 'fotoEmpleado')\"\n        accept=\"image/*\"\n        style=\"display: none;\"\n      />\n    </div>\n\n    <!-- Archivo de identificación -->\n    <div class=\"image-container archivo-identificacion\">\n      <label for=\"archivoIdentificacion\" class=\"image-label\">Archivo de Identificación</label>\n      <img *ngIf=\"archivoIdentificacionUrl\" [src]=\"archivoIdentificacionUrl\" alt=\"Archivo de Identificación\">\n      <button class=\"edit-button\" (click)=\"editarArchivo('archivoIdentificacion')\">\n        <mat-icon>edit</mat-icon>\n      </button>\n      <input\n        id=\"archivoIdentificacion\"\n        type=\"file\"\n        (change)=\"onFileChange($event, 'archivoIdentificacion')\"\n        accept=\"image/*\"\n        style=\"display: none;\"\n      />\n    </div>\n  </div>\n\n  <!-- Información del perfil -->\n  <mat-card class=\"info-card\">\n    <div class=\"info-section\">\n      <h3>Puesto</h3>\n      <p>{{ perfilForm.get('puesto')?.value }}</p>\n    </div>\n    <div class=\"info-section\">\n      <h3>Centro de Trabajo</h3>\n      <p>{{ perfilForm.get('centroTrabajo')?.value }}</p>\n    </div>\n  </mat-card>\n\n  <!-- Formulario de perfil -->\n  <form [formGroup]=\"perfilForm\" class=\"form-container\">\n    <input type=\"hidden\" formControlName=\"idEmpleado\">\n\n    <mat-card class=\"perfil-card\">\n      <mat-form-field appearance=\"fill\" class=\"full-width\">\n        <mat-label>Nombre</mat-label>\n        <input matInput formControlName=\"nombre\">\n      </mat-form-field>\n      <mat-form-field appearance=\"fill\" class=\"full-width\">\n        <mat-label>Teléfono 1</mat-label>\n        <input matInput formControlName=\"telefono1\">\n      </mat-form-field>\n      <mat-form-field appearance=\"fill\" class=\"full-width\">\n        <mat-label>Teléfono 2</mat-label>\n        <input matInput formControlName=\"telefono2\">\n      </mat-form-field>\n      <mat-form-field appearance=\"fill\" class=\"full-width\">\n        <mat-label>Número de Identificación</mat-label>\n        <input matInput formControlName=\"numeroIdentificacion\">\n      </mat-form-field>\n    </mat-card>\n\n    <button mat-raised-button color=\"primary\" (click)=\"guardar()\">Guardar Cambios</button>\n  </form>\n\n  <!-- Sección de módulos -->\n  <div class=\"modules-container\">\n    <h2>Módulos</h2>\n    <mat-card *ngFor=\"let modulo of modulos\" class=\"module-card\">\n      <h3>{{ modulo.nombre }}</h3>\n      <p>{{ modulo.descripcion }}</p>\n    </mat-card>\n  </div>\n\n  <!-- Cambio de contraseña -->\n  <h2>Cambiar Contraseña</h2>\n  <form [formGroup]=\"contrasenaForm\" (ngSubmit)=\"cambiarContrasena()\" class=\"form-container\">\n    <mat-card class=\"contrasena-card\">\n      <mat-form-field appearance=\"fill\" class=\"full-width\">\n        <mat-label>Nueva Contraseña</mat-label>\n        <input matInput type=\"password\" formControlName=\"nuevaContrasena\" required>\n      </mat-form-field>\n      <mat-form-field appearance=\"fill\" class=\"full-width\">\n        <mat-label>Confirmar Nueva Contraseña</mat-label>\n        <input matInput type=\"password\" formControlName=\"confirmarContrasena\" required>\n      </mat-form-field>\n      <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!contrasenaForm.valid\">Cambiar Contraseña</button>\n    </mat-card>\n  </form>\n</div>\n",
              "editar-perfil.component.scss": "/* Contenedor principal */\n.container {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n  background-color: #f3f4f6;\n  border-radius: 8px;\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);\n}\n\n/* Encabezados */\nh2 {\n  margin-bottom: 20px;\n  color: #333;\n  font-size: 24px;\n  text-align: center;\n}\n\n/* Contenedor de formularios */\n.form-container {\n  margin-bottom: 30px;\n}\n\n/* Tarjetas y campos */\n.perfil-card,\n.contrasena-card,\n.module-card {\n  padding: 20px;\n  margin-bottom: 20px;\n  background-color: #ffffff;\n  border-radius: 8px;\n  border: 1px solid #e0e0e0;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n}\n\n.full-width {\n  width: 100%;\n}\n\n/* Contenedor de imágenes de perfil */\n.perfil-imagenes {\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 20px;\n}\n\n.image-container {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  background-color: #ffffff;\n  padding: 10px;\n  border-radius: 8px;\n  border: 1px solid #ddd;\n  transition: transform 0.2s ease-in-out;\n}\n\n.image-container:hover {\n  transform: scale(1.05);\n}\n\n/* Etiquetas de imagen */\n.image-label {\n  font-weight: bold;\n  margin-bottom: 8px;\n  color: #555;\n}\n\n/* Imagenes */\nimg {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n  border-radius: 8px;\n  border: 2px solid #e0e0e0;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.foto-empleado img {\n  border-radius: 50%;\n}\n\n.archivo-identificacion img {\n  width: 280px;\n  height: auto;\n  border-radius: 8px;\n}\n\n/* Botón de edición */\n.edit-button {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  background-color: rgba(0, 0, 0, 0.6);\n  color: white;\n  border: none;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  transition: background-color 0.2s ease-in-out, transform 0.2s ease-in-out;\n}\n\n.edit-button:hover {\n  background-color: #f6a90a;\n  transform: scale(1.1);\n}\n\n/* Tarjeta de información */\n.info-card {\n  padding: 20px;\n  margin-bottom: 20px;\n  background-color: #fafafa;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n}\n\n.info-section {\n  margin-bottom: 10px;\n}\n\n.info-section h3 {\n  margin: 0;\n  font-size: 18px;\n  color: #555;\n}\n\n.info-section p {\n  margin: 5px 0 0;\n  font-size: 16px;\n  color: #333;\n}\n\n/* Módulos */\n.modules-container {\n  margin-top: 30px;\n}\n\n.modules-container h2 {\n  margin-bottom: 20px;\n  font-size: 22px;\n}\n\n.module-card {\n  background-color: #f9f9f9;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  padding: 20px;\n  margin-bottom: 10px;\n  transition: transform 0.2s ease-in-out;\n}\n\n.module-card:hover {\n  transform: scale(1.03);\n  background-color: #ffffff;\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);\n}\n\n.module-card h3 {\n  margin-top: 0;\n}\n\n/* Botones */\nbutton {\n  font-weight: bold;\n  border-radius: 4px;\n}\n\nbutton:disabled {\n  background-color: #ccc !important;\n}\n\n.mat-raised-button.color-primary {\n  background-color: #4caf50 !important;\n  color: white;\n}\n\n.mat-raised-button.color-primary:hover {\n  background-color: #388e3c !important;\n}\n",
              "editar-perfil.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { EditarPerfilComponent } from './editar-perfil.component';\n\ndescribe('EditarPerfilComponent', () => {\n  let component: EditarPerfilComponent;\n  let fixture: ComponentFixture<EditarPerfilComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [EditarPerfilComponent]\n    })\n    .compileComponents();\n    \n    fixture = TestBed.createComponent(EditarPerfilComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n",
              "editar-perfil.component.ts": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-editar-perfil',\n  templateUrl: './editar-perfil.component.html',\n  styleUrls: ['./editar-perfil.component.scss']\n})\nexport class EditarPerfilComponent implements OnInit {\n  perfilForm: FormGroup;\n  contrasenaForm: FormGroup;\n  correo!: string;\n  archivoIdentificacion: File | null = null;\n  archivoIdentificacionUrl: string | null = null;\n  fotoEmpleado: File | null = null;\n  fotoEmpleadoUrl: string | null = null;\n  modulos: any[] = [];\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private snackBar: MatSnackBar,\n    private toastr: ToastrService\n  ) {\n    this.perfilForm = this.fb.group({\n      idEmpleado: [null],\n      nombre: ['', Validators.required],\n      correo: ['', [Validators.required, Validators.email]],\n      puesto: ['', Validators.required],\n      centroTrabajo: ['', Validators.required],\n      telefono1: ['', Validators.required],\n      telefono2: [''],\n      numeroIdentificacion: ['', Validators.required]\n    });\n\n    this.contrasenaForm = this.fb.group({\n      nuevaContrasena: ['', [Validators.required, Validators.minLength(8)]],\n      confirmarContrasena: ['', Validators.required]\n    });\n  }\n\n  ngOnInit(): void {\n    this.correo = this.authService.obtenerCorreoDelToken()!;\n    this.obtenerPerfil();\n  }\n\n  obtenerPerfil(): void {\n    this.authService.obtenerPerfil(this.correo).subscribe({\n      next: (perfil: any) => {\n        const idEmpleado = perfil.empleadoCentroTrabajo.empleado.id_empleado; // Obtener el idEmpleado\n\n        // Actualizar los valores del formulario, incluyendo idEmpleado\n        this.perfilForm.patchValue({\n          idEmpleado: idEmpleado, // Asegúrate de agregar este valor al formulario\n          nombre: perfil.empleadoCentroTrabajo.empleado.nombreEmpleado,\n          correo: perfil.empleadoCentroTrabajo.correo_1,\n          puesto: perfil.empleadoCentroTrabajo.nombrePuesto,\n          centroTrabajo: perfil.empleadoCentroTrabajo.centroTrabajo.nombre_centro_trabajo,\n          telefono1: perfil.empleadoCentroTrabajo.empleado.telefono_1,\n          telefono2: perfil.empleadoCentroTrabajo.empleado.telefono_2,\n          numeroIdentificacion: perfil.empleadoCentroTrabajo.empleado.numero_identificacion\n        });\n\n        this.fotoEmpleadoUrl = perfil.empleadoCentroTrabajo.empleado.foto_empleado\n          ? `data:image/png;base64,${this.arrayBufferToBase64(perfil.empleadoCentroTrabajo.empleado.foto_empleado.data)}`\n          : null;\n\n        this.archivoIdentificacionUrl = perfil.empleadoCentroTrabajo.empleado.archivo_identificacion\n          ? `data:image/png;base64,${this.arrayBufferToBase64(perfil.empleadoCentroTrabajo.empleado.archivo_identificacion.data)}`\n          : null;\n\n        this.modulos = perfil.usuarioModulos.map((modulo: any) => modulo.rolModulo.modulo);\n      },\n      error: (err: any) => {\n        this.snackBar.open('Error al obtener el perfil del usuario', 'Cerrar', {\n          duration: 3000,\n        });\n      }\n    });\n  }\n\n  arrayBufferToBase64(buffer: ArrayBuffer): string {\n    let binary = '';\n    const bytes = new Uint8Array(buffer);\n    const len = bytes.byteLength;\n    for (let i = 0; i < len; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n    return window.btoa(binary);\n  }\n\n  onFileChange(event: any, tipoArchivo: string) {\n    const file = event.target.files[0];\n    if (file && file.type.startsWith('image/')) {\n      if (tipoArchivo === 'archivoIdentificacion') {\n        this.archivoIdentificacion = file;\n        this.archivoIdentificacionUrl = URL.createObjectURL(file);\n      } else if (tipoArchivo === 'fotoEmpleado') {\n        this.fotoEmpleado = file;\n        this.fotoEmpleadoUrl = URL.createObjectURL(file);\n      }\n    } else {\n      this.toastr.error('Solo se permiten archivos de tipo imagen.', 'Error de archivo');\n    }\n  }\n\n  editarArchivo(tipoArchivo: string): void {\n    const input = document.getElementById(tipoArchivo) as HTMLInputElement;\n    if (input) {\n      input.accept = 'image/*';\n      input.click();\n    }\n  }\n\n  cambiarContrasena(): void {\n    if (this.contrasenaForm.value.nuevaContrasena !== this.contrasenaForm.value.confirmarContrasena) {\n      this.snackBar.open('Las contraseñas no coinciden', 'Cerrar', {\n        duration: 3000,\n      });\n      return;\n    }\n\n    this.authService.cambiarContrasena(this.correo, this.contrasenaForm.value.nuevaContrasena).subscribe({\n      next: () => {\n        this.snackBar.open('Contraseña cambiada con éxito', 'Cerrar', {\n          duration: 3000,\n        });\n        this.contrasenaForm.reset();\n      },\n      error: (err: any) => {\n        this.snackBar.open('Error al cambiar la contraseña', 'Cerrar', {\n          duration: 3000,\n        });\n      }\n    });\n  }\n\n  guardar() {\n    if (this.perfilForm.valid) {\n      const idEmpleado = this.perfilForm.value.idEmpleado;\n\n      const formData: FormData = new FormData();\n      formData.append('nombreEmpleado', this.perfilForm.value.nombre || '');\n      formData.append('telefono_1', this.perfilForm.value.telefono1 || '');\n      formData.append('telefono_2', this.perfilForm.value.telefono2 || '');\n      formData.append('numero_identificacion', this.perfilForm.value.numeroIdentificacion || '');\n\n      if (this.archivoIdentificacion) {\n        formData.append('archivo_identificacion', this.archivoIdentificacion);\n      }\n\n      if (this.fotoEmpleado) {\n        formData.append('foto_empleado', this.fotoEmpleado);\n      }\n\n      this.authService.actualizarEmpleado(idEmpleado, formData).subscribe({\n        next: () => {\n          this.toastr.success('Datos guardados con éxito', 'Éxito');\n        },\n        error: (err: any) => {\n          this.toastr.error('Error al guardar los datos', 'Error');\n          console.error(err);\n        }\n      });\n    } else {\n      this.toastr.error('Formulario inválido', 'Error');\n    }\n  }\n\n}\n"
            },
            "login-privados": {
              "login-privados.component.html": "<app-custom-container></app-custom-container>\n\n\n<div id=\"back\">\n  <canvas #canvas id=\"canvas\" class=\"canvas-back\"></canvas>\n  <div class=\"backRight\">\n  </div>\n  <div class=\"backLeft\">\n    <div class=\"welcome-container\">\n      <h2>BIENVENIDO A INPRENET</h2>\n    </div>\n  </div>\n</div>\n\n\n<div id=\"slideBox\">\n  <div class=\"topLayer\">\n    <div class=\"right\">\n      <div class=\"content\">\n        <h2 class=\"prueba\">Iniciar Sesión</h2>\n        <form id=\"form-login\" (ngSubmit)=\"login()\" method=\"post\">\n          <div class=\"form-element form-stack\">\n            <label for=\"email-login\" class=\"form-label\">Correo Electrónico</label>\n            <input id=\"email-login\" type=\"text\" name=\"email\" [(ngModel)]=\"loginData.email\" required>\n          </div>\n          <div class=\"form-element form-stack\">\n            <label for=\"password-login\" class=\"form-label\">Contraseña</label>\n            <input id=\"password-login\" type=\"password\" name=\"password\" [(ngModel)]=\"loginData.password\" required>\n          </div>\n          <div class=\"form-element form-submit\">\n            <button id=\"logIn\" class=\"login\" name=\"login\">Iniciar sesión</button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n",
              "login-privados.component.scss": "$theme-signup: #03A9F4;\n$theme-signup-darken: #0288D1;\n$theme-signup-background: #2C3034;\n$theme-login: #26a69a;\n$theme-login-darken: #0d7b6c;\n$theme-login-background: #f9f9f9;\n$theme-dark: #212121;\n$theme-light: #e3e3e3;\n$font-default: 'Roboto', sans-serif;\n\n$success: #5cb85c;\n$error: #d9534f;\n\nbody {\n  margin: 0;\n  height: 100%;\n  overflow: hidden;\n  width: 100% !important;\n  box-sizing: border-box;\n  font-family: $font-default;\n}\n\n.prueba {\n  font-weight: 500 !important;\n}\n\n.backRight {\n  position: absolute;\n  right: 0;\n  width: 50%;\n  height: 100%;\n  background: $theme-signup;\n}\n\n.backLeft {\n  position: absolute;\n  left: 0;\n  width: 50%;\n  height: 100%;\n  background: $theme-login;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n\n  .welcome-container {\n    max-width: 80%; // Limita el ancho del contenido si es necesario\n    h2 {\n      color: $theme-light; // Asumiendo que quieras usar el color claro para el texto\n      font-size: 2em; // Tamaño de fuente grande para dar énfasis\n      margin: 0;\n      padding: 20px; // Espaciado alrededor del texto\n      // Asegúrate de que el texto es visible y legible sobre el fondo:\n      text-shadow: 0 2px 4px rgba($theme-dark, 0.5);\n    }\n  }\n}\n\n#back {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  z-index: -999;\n}\n\n.canvas-back {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 10;\n}\n\n#slideBox {\n  width: 50%;\n  max-height: 100%;\n  height: 100%;\n  overflow: hidden;\n  margin-left: 50%;\n  position: absolute;\n  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n}\n\n.topLayer {\n  width: 200%;\n  height: 100%;\n  position: relative;\n  left: 0;\n  left: -100%;\n}\n\nlabel {\n  font-size: 0.8em;\n  text-transform: uppercase;\n}\n\ninput {\n  background-color: transparent;\n  border: 0;\n  outline: 0;\n  font-size: 1em;\n  padding: 8px 1px;\n  margin-top: 0.1em;\n}\n\n.left {\n  width: 50%;\n  height: 100%;\n  overflow: scroll;\n  background: $theme-signup-background;\n  left: 0;\n  position: absolute;\n  label {\n    color: $theme-light;\n  }\n  input {\n    border-bottom: 1px solid $theme-light;\n    color: $theme-light;\n    &:focus, &:active {\n      border-color: $theme-signup;\n      color: $theme-signup;\n    }\n    &:-webkit-autofill {\n      -webkit-box-shadow: 0 0 0 30px $theme-signup-background inset;\n      -webkit-text-fill-color: $theme-light;\n    }\n  }\n  a {\n    color: $theme-signup;\n  }\n}\n\n.right {\n  width: 50%;\n  height: 100%;\n  overflow: scroll;\n  background: $theme-login-background;\n  right: 0;\n  position: absolute;\n  label {\n    color: $theme-dark;\n  }\n  input {\n    border-bottom: 1px solid $theme-dark;\n    &:focus, &:active {\n      border-color: $theme-login;\n    }\n    &:-webkit-autofill {\n      -webkit-box-shadow: 0 0 0 30px $theme-login-background inset;\n      -webkit-text-fill-color: $theme-dark;\n    }\n  }\n}\n\n.content {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  min-height: 100%;\n  width: 80%;\n  margin: 0 auto;\n  position: relative;\n}\n\n.content h2 {\n  font-weight: 300;\n  font-size: 2.6em;\n  margin: 0.2em 0 0.1em;\n}\n\n.left .content h2 {\n  color: $theme-signup;\n}\n\n.right .content h2 {\n  color: $theme-login;\n}\n\n.form-element {\n  margin: 1.6em 0;\n  &.form-submit {\n    margin: 1.6em 0 0;\n  }\n}\n\n.form-stack {\n  display: flex;\n  flex-direction: column;\n}\n\n.checkbox {\n  -webkit-appearance: none;\n  outline: none;\n  background-color: $theme-light;\n  border: 1px solid $theme-light;\n  box-shadow: 0 1px 2px rgba(0,0,0,0.05), inset 0px -15px 10px -12px rgba(0,0,0,0.05);\n  padding: 12px;\n  border-radius: 4px;\n  display: inline-block;\n  position: relative;\n}\n.checkbox:focus, .checkbox:checked:focus,\n.checkbox:active, .checkbox:checked:active {\n  border-color: $theme-signup;\n  box-shadow: 0 1px 2px rgba(0,0,0,0.05), inset 0px 1px 3px rgba(0,0,0,0.1);\n}\n\n.checkbox:checked {\n  outline: none;\n  box-shadow: 0 1px 2px rgba(0,0,0,0.05), inset 0px -15px 10px -12px rgba(0,0,0,0.05), inset 15px 10px -12px rgba(255,255,255,0.1);\n}\n\n.checkbox:checked:after {\n  outline: none;\n  content: '\\2713';\n  color: $theme-signup;\n  font-size: 1.4em;\n  font-weight: 900;\n  position: absolute;\n  top: -4px;\n  left: 4px;\n}\n\n.form-checkbox {\n  display: flex;\n  align-items: center;\n\n  label {\n    margin: 0 6px 0;\n    font-size: 0.72em;\n  }\n}\n\nbutton {\n  padding: 0.8em 1.2em;\n  margin: 0 10px 0 0;\n  width: auto;\n  font-weight: 600;\n  text-transform: uppercase;\n  font-size: 1em;\n  color: #fff;\n  line-height: 1em;\n  letter-spacing: 0.6px;\n  border-radius: 3px;\n  box-shadow: 0 2px 6px rgba(0,0,0,0.1), 0 3px 6px rgba(0,0,0,0.1);\n  border: 0;\n  outline: 0;\n  transition: all 0.25s;\n  &.signup {\n    background: $theme-signup;\n  }\n  &.login {\n    background: $theme-login;\n  }\n  &.off {\n    background: none;\n    box-shadow: none;\n    margin: 0;\n\n    &.signup {\n      color: $theme-signup;\n    }\n    &.login {\n      color: $theme-login;\n    }\n  }\n}\n\nbutton:focus, button:active, button:hover {\n  box-shadow: 0 4px 7px rgba(0,0,0,0.1), 0 3px 6px rgba(0,0,0,0.1);\n  &.signup {\n    background: $theme-signup-darken;\n  }\n  &.login {\n    background: $theme-login-darken;\n  }\n  &.off {\n    box-shadow: none;\n    &.signup {\n      color: $theme-signup;\n      background: $theme-dark;\n    }\n    &.login {\n      color: $theme-login-darken;\n      background: $theme-light;\n    }\n  }\n}\n\n@media only screen and (max-width: 768px) {\n  #slideBox {\n    width: 80%;\n    margin-left: 20%;\n  }\n  .signup-info, .login-info {\n    display: none;\n  }\n}\n",
              "login-privados.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { LoginPrivadosComponent } from './login-privados.component';\n\ndescribe('LoginPrivadosComponent', () => {\n  let component: LoginPrivadosComponent;\n  let fixture: ComponentFixture<LoginPrivadosComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [LoginPrivadosComponent]\n    })\n    .compileComponents();\n    \n    fixture = TestBed.createComponent(LoginPrivadosComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n",
              "login-privados.component.ts": "import { Component} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-login-privados',\n  templateUrl: './login-privados.component.html',\n  styleUrls: ['./login-privados.component.scss']\n})\nexport class LoginPrivadosComponent {\n\n  loginData = {\n    email: '',\n    password: ''\n  };\n\n  constructor(private authService: AuthService,\n    private toastr: ToastrService,\n    private router: Router) { }\n\n    login() {\n      /* this.authService.loginPrivada(this.loginData.email, this.loginData.password).subscribe({\n        next: (response) => {\n          //console.log('Inicio de sesión exitoso:', response.access_token);\n          this.authService.saveToken(response.access_token);\n          this.router.navigate(['/privados/PlanillaPrivados']);\n        },\n        error: (error) => {\n          console.error('Error en el inicio de sesión:', error);\n          this.toastr.error('Credenciales inválidas o error en el servidor.');\n        }\n      }); */\n    }\n\n\n\n}\n"
            },
            "login": {
              "login.component.html": "<app-custom-container></app-custom-container>\n\n<div class=\"login-container\">\n  <mat-card class=\"login-card\">\n    <div class=\"text-center\">\n      <img src=\"../assets/images/LOGO INPRENET.png\" width=\"320px\" height=\"70px\" alt=\"Descripción de la imagen\">\n    </div>\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onLogin()\">\n      <h1 style=\"color:grey; text-align: center;\">Inicio de sesión</h1>\n      <p class=\"text-medium-emphasis\">Para ingresar a tu cuenta</p>\n\n      <mat-form-field appearance=\"fill\" class=\"full-width\">\n        <mat-label>Correo Electrónico</mat-label>\n        <input matInput formControlName=\"email\" placeholder=\"Correo Electrónico\" />\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\" class=\"full-width\">\n        <mat-label>Contraseña</mat-label>\n        <input [type]=\"passwordVisible ? 'text' : 'password'\" matInput formControlName=\"password\" placeholder=\"Contraseña\" />\n        <button mat-icon-button matSuffix type=\"button\" (click)=\"togglePasswordVisibility()\" tabindex=\"-1\">\n          <mat-icon>{{ passwordVisible ? 'visibility' : 'visibility_off' }}</mat-icon>\n        </button>\n      </mat-form-field>\n\n      <mat-checkbox formControlName=\"rememberMe\">Recordar mi usuario</mat-checkbox>\n\n      <div *ngIf=\"!loading; else loadingTemplate\" class=\"button-row\">\n        <button mat-raised-button color=\"primary\" type=\"submit\" class=\"general\">Ingresar</button>\n        <button mat-button color=\"warn\" (click)=\"redirectOlvidoContrasena()\">¿Olvidaste tu contraseña?</button>\n      </div>\n\n      <ng-template #loadingTemplate>\n        <div class=\"spinner-container\">\n          <mat-progress-spinner mode=\"indeterminate\"></mat-progress-spinner>\n        </div>\n      </ng-template>\n    </form>\n  </mat-card>\n</div>\n",
              "login.component.scss": ".login-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  background-color: #f5f5f5;\n}\n\n.login-card {\n  max-width: 400px;\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.2);\n  background-color: #fff;\n}\n\n.full-width {\n  width: 100%;\n}\n\n.button-row {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px 0;\n}\n\n.general {\n  background: #1F544A;\n  color: white;\n}\n\n.spinner-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100px;\n}\n",
              "login.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { ButtonModule, CardModule, FormModule, GridModule } from '@coreui/angular';\nimport { LoginComponent } from './login.component';\nimport { IconModule } from '@coreui/icons-angular';\nimport { IconSetService } from '@coreui/icons-angular';\nimport { iconSubset } from '../../../../icons/icon-subset';\n\ndescribe('LoginComponent', () => {\n  let component: LoginComponent;\n  let fixture: ComponentFixture<LoginComponent>;\n  let iconSetService: IconSetService;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ LoginComponent ],\n      imports: [FormModule, CardModule, GridModule, ButtonModule, IconModule],\n      providers: [IconSetService]\n    })\n    .compileComponents();\n  });\n\n  beforeEach(() => {\n    iconSetService = TestBed.inject(IconSetService);\n    iconSetService.icons = { ...iconSubset };\n\n    fixture = TestBed.createComponent(LoginComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n",
              "login.component.ts": "import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent {\n  loginForm: FormGroup;\n  loading: boolean = false;\n  passwordVisible: boolean = false; // Variable para controlar la visibilidad de la contraseña\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private toastr: ToastrService\n  ) {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required],\n      rememberMe: [false]\n    });\n\n    this.loadStoredEmail();\n  }\n\n  loadStoredEmail(): void {\n    const storedEmail = localStorage.getItem('email');\n    if (storedEmail) {\n      this.loginForm.patchValue({\n        email: storedEmail,\n        rememberMe: true\n      });\n    }\n  }\n\n  onLogin() {\n    this.loading = true;\n    const { email, password, rememberMe } = this.loginForm.value;\n\n    this.authService.login(email, password).subscribe({\n      next: (response) => {\n        if (rememberMe) {\n          localStorage.setItem('email', email);\n        } else {\n          localStorage.removeItem('email');\n        }\n\n        setTimeout(() => {\n          this.loading = false;\n          this.router.navigate(['/home']);\n          this.toastr.success('Inicio de sesión exitoso', 'Bienvenido');\n        }, 1000);\n      },\n      error: (err) => {\n        setTimeout(() => {\n          this.loading = false;\n          if (err.status === 401) {\n            this.toastr.error('Credenciales incorrectas. Por favor, intente de nuevo.', 'Error de inicio de sesión', {\n              closeButton: true,\n              timeOut: 3000,\n            });\n          } else {\n            this.toastr.error('Ocurrió un error. Por favor, intente de nuevo.', 'Error');\n            console.error('Login failed:', err);\n          }\n        }, 1000);\n      }\n    });\n  }\n\n  togglePasswordVisibility(): void {\n    this.passwordVisible = !this.passwordVisible; // Cambia el estado de visibilidad de la contraseña\n  }\n\n  redirectOlvidoContrasena() {\n    this.router.navigate(['/solicitud-restablecimiento']);\n  }\n}\n"
            },
            "olvido-contrasena": {
              "olvido-contrasena.component.html": "<app-custom-container></app-custom-container>\n\n<div class=\"forgot-password-container\">\n  <h2 class=\"title\">Recuperar Contraseña</h2>\n  <form (ngSubmit)=\"onSubmit()\">\n    <mat-card class=\"forgot-password-card\">\n      <mat-form-field appearance=\"outline\" class=\"full-width\">\n        <mat-label>Correo Electrónico</mat-label>\n        <input matInput type=\"email\" [(ngModel)]=\"email\" name=\"email\" autocomplete=\"off\" required>\n      </mat-form-field>\n\n      <button mat-raised-button color=\"primary\" type=\"submit\" class=\"full-width\" [disabled]=\"cargando || !email\">\n        Enviar Enlace de Recuperación\n      </button>\n\n      <div *ngIf=\"cargando\" class=\"loading-spinner\">\n        <mat-progress-spinner mode=\"indeterminate\"></mat-progress-spinner>\n      </div>\n    </mat-card>\n  </form>\n</div>\n",
              "olvido-contrasena.component.scss": ".forgot-password-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 2rem;\n  background-color: #f5f5f5;\n  min-height: 100vh;\n}\n\n.title {\n  color: #1c9588;\n  margin-bottom: 1rem;\n  text-align: center;\n}\n\n.forgot-password-card {\n  padding: 2rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  background-color: white;\n  width: 100%;\n  max-width: 600px;\n}\n\n.full-width {\n  width: 100%;\n}\n\nmat-form-field {\n  margin-bottom: 1.5rem;\n}\n\n.loading-spinner {\n  display: flex;\n  justify-content: center;\n  margin-top: 1rem;\n}\n",
              "olvido-contrasena.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { OlvidoContrasenaComponent } from './olvido-contrasena.component';\n\ndescribe('OlvidoContrasenaComponent', () => {\n  let component: OlvidoContrasenaComponent;\n  let fixture: ComponentFixture<OlvidoContrasenaComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [OlvidoContrasenaComponent]\n    })\n    .compileComponents();\n    \n    fixture = TestBed.createComponent(OlvidoContrasenaComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n",
              "olvido-contrasena.component.ts": "import { Component } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-olvido-contrasena',\n  templateUrl: './olvido-contrasena.component.html',\n  styleUrls: ['./olvido-contrasena.component.scss']\n})\nexport class OlvidoContrasenaComponent {\n  email: string = '';\n  cargando: boolean = false;\n\n  constructor(private authService: AuthService) {}\n\n  onSubmit() {\n    this.cargando = true;\n    this.authService.recuperarContrasena(this.email).subscribe({\n      next: () => {\n        this.cargando = false;\n      },\n      error: () => {\n        this.cargando = false;\n      }\n    });\n  }\n\n\n\n\n}\n"
            },
            "pre-register": {
              "pre-register.component.html": "<div class=\"container\">\n  <div class=\"form-container\">\n    <div class=\"form-header\">\n      <img src=\"../assets/images/LOGO INPRENET D.svg\" alt=\"Logo\" class=\"logo\">\n      <h2>Pre-Registro</h2>\n    </div>\n    <form [formGroup]=\"form\" (ngSubmit)=\"crearCuenta()\">\n      <mat-form-field appearance=\"fill\" class=\"full-width\">\n        <mat-label>Correo</mat-label>\n        <input matInput formControlName=\"correo\" placeholder=\"Ingrese su correo\">\n        <mat-error *ngIf=\"form.get('correo')?.invalid && form.get('correo')?.touched\">\n          Correo es requerido y debe ser válido\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\" class=\"full-width\">\n        <mat-label>Rol</mat-label>\n        <mat-select formControlName=\"rol\" placeholder=\"Seleccione un rol\">\n          <mat-option *ngFor=\"let rol of tipoRol\" [value]=\"rol.value\">{{ rol.label }}</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"form.get('rol')?.invalid && form.get('rol')?.touched\">\n          Rol es requerido\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\" class=\"full-width\">\n        <mat-label>Nombre del Puesto</mat-label>\n        <input matInput formControlName=\"nombrePuesto\" placeholder=\"Ingrese el nombre del puesto\">\n        <mat-error *ngIf=\"form.get('nombrePuesto')?.invalid && form.get('nombrePuesto')?.touched\">\n          Nombre del puesto es requerido\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\" class=\"full-width\">\n        <mat-label>Nombre Completo</mat-label>\n        <input matInput formControlName=\"nombreEmpleado\" placeholder=\"Ingrese su nombre completo\">\n        <mat-error *ngIf=\"form.get('nombreEmpleado')?.invalid && form.get('nombreEmpleado')?.touched\">\n          Nombre completo es requerido\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\" class=\"full-width\">\n        <mat-label>Número de Empleado</mat-label>\n        <input matInput formControlName=\"numeroEmpleado\" placeholder=\"Ingrese su número de empleado\">\n        <mat-error *ngIf=\"form.get('numeroEmpleado')?.invalid && form.get('numeroEmpleado')?.touched\">\n          Número de empleado es requerido\n        </mat-error>\n      </mat-form-field>\n\n      <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"form.invalid\">Crear Cuenta</button>\n    </form>\n  </div>\n</div>",
              "pre-register.component.scss": "/* pre-register.component.scss */\n@use '@angular/material' as mat;\n\n:host {\n  display: block;\n  height: 100vh;\n  width: 100vw;\n  background-color: #1c9588; /* Aplica el color de fondo solo aquí */\n  margin: 0;\n  padding: 0;\n}\n\n.container {\n  display: grid;\n  place-items: center;\n  height: 100%;\n  width: 100%;\n}\n\n.form-container {\n  background: #fff;\n  padding: 2rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  width: 100%;\n  max-width: 500px;\n}\n\n.form-header {\n  text-align: center;\n  margin-bottom: 2rem;\n}\n\n.logo {\n  width: 400px; /* Aumenta el tamaño del logo */\n  margin-bottom: 1rem;\n}\n\n.full-width {\n  width: 100%;\n}\n\n.file-upload {\n  margin-top: 1rem;\n  margin-bottom: 2rem;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}\n\nbutton {\n  width: 100%;\n}\n",
              "pre-register.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { PreRegisterComponent } from './pre-register.component';\n\ndescribe('PreRegisterComponent', () => {\n  let component: PreRegisterComponent;\n  let fixture: ComponentFixture<PreRegisterComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [PreRegisterComponent]\n    })\n    .compileComponents();\n    \n    fixture = TestBed.createComponent(PreRegisterComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n",
              "pre-register.component.ts": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-pre-register',\n  templateUrl: './pre-register.component.html',\n  styleUrls: ['./pre-register.component.scss']\n})\nexport class PreRegisterComponent implements OnInit {\n  form: FormGroup;\n  tipoRol: any[] = [];\n  idCentroTrabajo: number | null = null;\n\n  constructor(\n    private fb: FormBuilder,\n    private authSvc: AuthService,\n    private toastr: ToastrService\n  ) {\n    this.form = this.fb.group({\n      correo: ['', [Validators.required, Validators.email]],\n      rol: ['', [Validators.required]],\n      nombrePuesto: ['', [Validators.required]],\n      nombreEmpleado: ['', [Validators.required]],\n      numeroEmpleado: ['', [Validators.required]]\n    });\n  }\n\n  ngOnInit() {\n    this.idCentroTrabajo = this.authSvc.getIdEmpresaFromToken();\n    if (this.idCentroTrabajo) {\n      this.authSvc.getRolesByEmpresa(this.idCentroTrabajo).subscribe({\n\n        next: (roles) => {\n          this.tipoRol = roles.map((rol: any) => ({\n            label: rol.nombre,\n            value: rol.id_rol_empresa\n          }));\n        },\n        error: (err) => {\n          console.error('Error al obtener roles:', err);\n          this.toastr.error('Error al obtener roles', 'Error');\n        }\n      });\n    }\n  }\n\n  crearCuenta() {\n    if (this.form.valid) {\n      const formData = {\n        correo: this.form.value.correo,\n        idRole: this.form.value.rol,\n        nombrePuesto: this.form.value.nombrePuesto,\n        nombreEmpleado: this.form.value.nombreEmpleado,\n        numeroEmpleado: this.form.value.numeroEmpleado\n      };\n\n      this.authSvc.preRegistro(formData).subscribe({\n        next: () => {\n          this.toastr.success('Cuenta creada exitosamente!', 'Éxito');\n          this.form.reset();\n        },\n        error: (err) => {\n          this.toastr.error('Error al crear la cuenta', 'Error');\n          console.error('Error al crear la cuenta:', err);\n        }\n      });\n    } else {\n      console.error('El formulario no es válido');\n      this.toastr.error('El formulario no es válido', 'Error');\n    }\n  }\n}\n"
            },
            "register": {
              "register.component.html": "<app-custom-container></app-custom-container>\n<br>\n<br>\n<div class=\"register-wrapper\">\n  <div class=\"register-container mat-elevation-z8\">\n    <div class=\"logo-container\">\n      <img src=\"../assets/images/LOGO INPRENET D.svg\" alt=\"Logo de la Aplicación\">\n    </div>\n    <h2>Completa tu Registro</h2>\n    <form [formGroup]=\"form\" (ngSubmit)=\"enviarInformacionDeSeguridad()\">\n      <div class=\"form-grid\">\n        <div class=\"form-row\">\n          <mat-form-field appearance=\"fill\" class=\"form-field col-12\">\n            <mat-label>Correo Electrónico</mat-label>\n            <input matInput type=\"email\" formControlName=\"correo\" readonly>\n          </mat-form-field>\n        </div>\n        <!-- <div class=\"form-row\">\n          <mat-form-field appearance=\"fill\" class=\"form-field col-12\">\n            <mat-label>Número de Identificación</mat-label>\n            <input matInput type=\"text\" formControlName=\"numero_identificacion\">\n          </mat-form-field>\n        </div> -->\n        <div class=\"form-row\">\n          <mat-form-field appearance=\"fill\" class=\"form-field col-6\">\n            <mat-label>Teléfono</mat-label>\n            <input matInput type=\"text\" formControlName=\"telefonoEmpleado\">\n          </mat-form-field>\n          <mat-form-field appearance=\"fill\" class=\"form-field col-6\">\n            <mat-label>Teléfono Secundario</mat-label>\n            <input matInput type=\"text\" formControlName=\"telefonoEmpleado2\">\n          </mat-form-field>\n        </div>\n        <div class=\"form-row\">\n          <mat-form-field appearance=\"fill\" class=\"form-field col-6\">\n            <mat-label>Contraseña</mat-label>\n            <input matInput [type]=\"passwordVisible ? 'text' : 'password'\" formControlName=\"contrasena\">\n            <button mat-icon-button matSuffix type=\"button\" (click)=\"togglePasswordVisibility()\" tabindex=\"-1\">\n              <mat-icon>{{ passwordVisible ? 'visibility' : 'visibility_off' }}</mat-icon>\n            </button>\n            <mat-error *ngIf=\"form.controls['contrasena'].hasError('required')\">\n              La contraseña es obligatoria.\n            </mat-error>\n            <mat-error *ngIf=\"form.controls['contrasena'].hasError('pattern')\">\n              La contraseña debe tener al menos 8 caracteres, una mayúscula, una minúscula, un número y un carácter especial.\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field appearance=\"fill\" class=\"form-field col-6\">\n            <mat-label>Confirmar Contraseña</mat-label>\n            <input matInput [type]=\"confirmPasswordVisible ? 'text' : 'password'\" formControlName=\"confirmarContrasenia\">\n            <button mat-icon-button matSuffix type=\"button\" (click)=\"toggleConfirmPasswordVisibility()\" tabindex=\"-1\">\n              <mat-icon>{{ confirmPasswordVisible ? 'visibility' : 'visibility_off' }}</mat-icon>\n            </button>\n            <mat-error *ngIf=\"form.controls['confirmarContrasenia'].hasError('confirmarContrasena')\">\n              Las contraseñas no coinciden\n            </mat-error>\n          </mat-form-field>\n        </div>\n        <div class=\"form-row\">\n          <!-- <div class=\"form-group col-6\">\n            <label for=\"archivo\">Sube tu identificación</label>\n            <input id=\"archivo\" type=\"file\" (change)=\"onFileChange($event, 'archivo')\" accept=\"image/*\" />\n          </div> -->\n          <div class=\"form-group col-6\">\n            <label for=\"fotografia\">Sube tu fotografía para tu perfil</label>\n            <input id=\"fotografia\" type=\"file\" (change)=\"onFileChange($event, 'fotografia')\" accept=\"image/*\" />\n          </div>\n        </div>\n        <div class=\"form-row\">\n          <button mat-raised-button color=\"primary\" type=\"submit\" class=\"full-width\" [disabled]=\"!isFormComplete()\">\n            Completar Registro\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n",
              "register.component.scss": ":host {\n  display: block;\n  height: 100%;\n  width: 100%;\n  background-color: #1C9588;\n  overflow: auto;\n}\n\n.register-wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n  width: 100%;\n  padding: 20px;\n\n  /* Ajuste de padding y ancho para pantallas pequeñas */\n  @media (max-width: 768px) {\n    padding: 10px;\n  }\n}\n\n.register-container {\n  max-width: 600px;\n  width: 100%;\n  padding: 20px;\n  background-color: #ffffff;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  .logo-container {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    margin-bottom: 10px;\n\n    img {\n      max-width: 200px;\n    }\n  }\n\n  h2 {\n    text-align: center;\n    margin-bottom: 20px;\n    font-size: 2rem;\n    color: #333;\n  }\n\n  .form-grid {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n  }\n\n  .form-row {\n    display: flex;\n    gap: 15px;\n    width: 100%;\n    flex-wrap: wrap;\n\n    .form-field {\n      flex: 1;\n      min-width: calc(50% - 15px);\n    }\n\n    .col-6 {\n      flex: 1;\n    }\n\n    .col-12 {\n      flex: 1 0 100%;\n    }\n\n    .full-width {\n      flex: 1 0 100%;\n    }\n\n    .half-width {\n      flex: 1;\n      min-width: calc(50% - 15px);\n    }\n\n    .form-group {\n      width: 100%;\n      margin-bottom: 10px;\n\n      label {\n        display: block;\n        margin-bottom: 5px;\n        font-weight: bold;\n        color: #333;\n      }\n\n      input.form-control-file {\n        width: 100%;\n        padding: 8px;\n        border: 1px solid #ccc;\n        border-radius: 4px;\n      }\n    }\n  }\n\n  .button-container {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    margin-top: 20px;\n\n    button {\n      padding: 10px 20px;\n      font-size: 16px;\n      cursor: pointer;\n      margin: 0 10px;\n      border-radius: 4px;\n      background-color: #13776B;\n      color: white;\n      transition: background-color 0.3s;\n\n      &:hover:not([disabled]) {\n        background-color: #0e5b53;\n      }\n\n      &:disabled {\n        background-color: #ddd;\n        cursor: not-allowed;\n      }\n    }\n  }\n\n  @media (max-width: 768px) {\n    padding: 15px;\n\n    .form-row {\n      flex-direction: column;\n    }\n\n    .form-field,\n    .form-group,\n    .button-container {\n      flex: 1 0 100%;\n      margin: 0;\n    }\n\n    h2 {\n      font-size: 1.5rem;\n    }\n\n    .logo-container img {\n      max-width: 120px;\n    }\n  }\n\n  @media (max-width: 480px) {\n    .form-field,\n    .form-group,\n    .button-container {\n      width: 100%;\n      padding: 0;\n    }\n  }\n}\n\nmat-form-field {\n  width: 100%;\n}\n\n.toastr {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  z-index: 10000;\n}\n\n\nmat-error {\n  color: red;\n  font-size: 12px; /* Tamaño más pequeño para que no rompa el diseño */\n  line-height: 1.5; /* Mejor separación entre líneas si el mensaje es largo */\n  margin-top: 5px; /* Separación del campo */\n  white-space: normal; /* Permitir que el texto se ajuste automáticamente */\n  word-wrap: break-word; /* Ajustar palabras largas */\n}\n\n.register-container {\n  max-width: 600px;\n  padding: 20px;\n  box-sizing: border-box; /* Asegúrate de que el padding no rompa el diseño */\n}\n\n@media (max-width: 768px) {\n  .register-container {\n    max-width: 100%;\n    padding: 15px;\n  }\n\n  mat-error {\n    font-size: 10px; /* Ajustar tamaño para pantallas pequeñas */\n  }\n}\n",
              "register.component.ts": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { jwtDecode } from 'jwt-decode';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  form: FormGroup;\n  archivo: File | null = null;\n  fotografia: File | null = null;\n  token: string = '';\n  correo: string = '';\n  passwordVisible: boolean = false;\n  confirmPasswordVisible: boolean = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private route: ActivatedRoute,\n    private toastr: ToastrService,\n    private router: Router\n  ) {\n    this.form = this.fb.group({\n      correo: [{ value: '', disabled: true }, [Validators.required, Validators.email]],\n      contrasena: ['', [\n        Validators.required,\n      ]],\n      confirmarContrasenia: ['', [Validators.required]],\n      telefonoEmpleado: [\n        '',\n        [\n          Validators.required,\n          Validators.pattern('^[0-9]{8,}$'), // Acepta solo números y mínimo 8 dígitos\n        ],\n      ],\n      telefonoEmpleado2: [\n        '',\n        [\n          Validators.pattern('^[0-9]{8,}$'), // Acepta solo números y mínimo 8 dígitos\n        ],\n      ],\n      numero_identificacion: ['', []]\n    }, { validator: this.confirmarContrasenaValidator('contrasena', 'confirmarContrasenia') });\n  }\n\n  ngOnInit(): void {\n    this.token = this.route.snapshot.queryParams['token'];\n    if (this.token) {\n      const decodedToken: any = jwtDecode(this.token);\n      this.correo = decodedToken.correo;\n      this.form.patchValue({ correo: this.correo });\n    } else {\n      this.toastr.error('Token no encontrado', 'Error');\n      this.router.navigate(['/']);\n    }\n  }\n\n  confirmarContrasenaValidator(controlName: string, matchingControlName: string) {\n    return (formGroup: FormGroup) => {\n      const control = formGroup.controls[controlName];\n      const matchingControl = formGroup.controls[matchingControlName];\n\n      if (matchingControl.errors && !matchingControl.errors['confirmarContrasena']) {\n        return;\n      }\n      if (control.value !== matchingControl.value) {\n        matchingControl.setErrors({ confirmarContrasena: true });\n      } else {\n        matchingControl.setErrors(null);\n      }\n    }\n  }\n\n  toggleConfirmPasswordVisibility(): void {\n    this.confirmPasswordVisible = !this.confirmPasswordVisible;\n  }\n\n  togglePasswordVisibility(): void {\n    this.passwordVisible = !this.passwordVisible;\n  }\n\n  onFileChange(event: any, type: string) {\n    const file = event.target.files[0];\n    if (file && file.type.startsWith('image/')) {\n      if (type === 'archivo') {\n        this.archivo = file;\n      } else if (type === 'fotografia') {\n        this.fotografia = file;\n      }\n    } else {\n      this.toastr.error('Solo se permiten archivos de tipo imagen.', 'Error de archivo');\n    }\n  }\n\n  isFormComplete(): boolean {\n    return this.form.valid;\n  }\n\n  enviarInformacionDeSeguridad() {\n    if (this.form.valid) {\n      const datos = {\n        correo: this.form.get('correo')!.value,\n        contrasena: this.form.get('contrasena')!.value,\n        telefonoEmpleado: this.form.get('telefonoEmpleado')!.value,\n        telefonoEmpleado2: this.form.get('telefonoEmpleado2')!.value,\n        numero_identificacion: this.form.get('numero_identificacion')!.value\n      };\n\n      this.authService.completarRegistro(\n        this.token,\n        datos,\n        this.archivo ?? undefined,\n        this.fotografia ?? undefined\n      ).subscribe({\n        next: () => {\n          this.toastr.success('Registro completado con éxito', 'Éxito');\n          this.router.navigate(['/login']);\n        },\n        error: (err) => {\n          console.error(err);\n          this.toastr.error('Error al completar el registro', 'Error');\n        }\n      });\n    } else {\n      this.toastr.error('Por favor, completa todos los campos requeridos.', 'Error');\n    }\n  }\n}\n"
            },
            "restablecer-contrasena": {
              "restablecer-contrasena.component.html": "<div class=\"reset-password-container\">\n  <h2 class=\"title\">Restablecer Contraseña</h2>\n  <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n    <mat-card class=\"reset-password-card\">\n      <mat-form-field appearance=\"outline\" class=\"full-width\">\n        <mat-label>Nueva Contraseña</mat-label>\n        <input matInput type=\"password\" formControlName=\"nuevaContrasena\" required />\n        <mat-error *ngIf=\"form.get('nuevaContrasena')?.hasError('required')\">Este campo es obligatorio</mat-error>\n        <mat-error *ngIf=\"form.get('nuevaContrasena')?.hasError('minlength')\">Mínimo 8 caracteres</mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"outline\" class=\"full-width\">\n        <mat-label>Confirmar Contraseña</mat-label>\n        <input matInput type=\"password\" formControlName=\"confirmarContrasena\" required />\n        <mat-error *ngIf=\"form.get('confirmarContrasena')?.hasError('required')\">Este campo es obligatorio</mat-error>\n      </mat-form-field>\n\n      <button mat-raised-button color=\"primary\" type=\"submit\" class=\"full-width\" [disabled]=\"cargando\">\n        Restablecer Contraseña\n      </button>\n\n      <div *ngIf=\"cargando\" class=\"loading-spinner\">\n        <mat-progress-spinner mode=\"indeterminate\"></mat-progress-spinner>\n      </div>\n    </mat-card>\n  </form>\n</div>\n",
              "restablecer-contrasena.component.scss": ".reset-password-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 2rem;\n  background-color: #f5f5f5;\n  min-height: 100vh;\n}\n\n.title {\n  color: #1c9588;\n  margin-bottom: 1rem;\n  text-align: center;\n}\n\n.reset-password-card {\n  padding: 2rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  background-color: white;\n  width: 100%;\n  max-width: 600px;\n}\n\n.full-width {\n  width: 100%;\n}\n\nmat-form-field {\n  margin-bottom: 1.5rem;\n}\n\n.loading-spinner {\n  display: flex;\n  justify-content: center;\n  margin-top: 1rem;\n}\n",
              "restablecer-contrasena.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { RestablecerContrasenaComponent } from './restablecer-contrasena.component';\n\ndescribe('RestablecerContrasenaComponent', () => {\n  let component: RestablecerContrasenaComponent;\n  let fixture: ComponentFixture<RestablecerContrasenaComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [RestablecerContrasenaComponent]\n    })\n    .compileComponents();\n    \n    fixture = TestBed.createComponent(RestablecerContrasenaComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n",
              "restablecer-contrasena.component.ts": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-restablecer-contrasena',\n  templateUrl: './restablecer-contrasena.component.html',\n  styleUrls: ['./restablecer-contrasena.component.scss']\n})\nexport class RestablecerContrasenaComponent implements OnInit {\n  form: FormGroup;\n  token: string = '';\n  cargando: boolean = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private route: ActivatedRoute,\n    private authService: AuthService,\n    private snackBar: MatSnackBar,\n    private router: Router\n  ) {\n    this.form = this.fb.group({\n      nuevaContrasena: ['', [Validators.required, Validators.minLength(8)]],\n      confirmarContrasena: ['', [Validators.required]]\n    });\n  }\n\n  ngOnInit(): void {\n    this.token = this.route.snapshot.paramMap.get('token') || '';\n    if (!this.token) {\n      this.snackBar.open('Enlace inválido o expirado.', 'Cerrar', {\n        duration: 3000\n      });\n      this.router.navigate(['/recuperar-contrasena']);\n    }\n  }\n\n  onSubmit(): void {\n    if (this.form.invalid || this.form.value.nuevaContrasena !== this.form.value.confirmarContrasena) {\n      this.snackBar.open('Las contraseñas no coinciden o el formulario no es válido.', 'Cerrar', {\n        duration: 3000\n      });\n      return;\n    }\n\n    this.cargando = true;\n    const { nuevaContrasena } = this.form.value;\n\n    this.authService.restablecerContrasena(this.token, nuevaContrasena).subscribe({\n      next: () => {\n        this.snackBar.open('Contraseña restablecida correctamente.', 'Cerrar', {\n          duration: 3000\n        });\n        this.cargando = false;\n        this.router.navigate(['/login']);\n      },\n      error: (error) => {\n        console.error('Error al restablecer contraseña:', error);\n        this.snackBar.open('No se pudo restablecer la contraseña. Inténtelo más tarde.', 'Cerrar', {\n          duration: 3000\n        });\n        this.cargando = false;\n      }\n    });\n  }\n}\n"
            }
          }
        },
        "services": {
          "auth.service.spec.ts": "import { TestBed } from '@angular/core/testing';\n\nimport { AuthService } from './auth.service';\n\ndescribe('AuthService', () => {\n  let service: AuthService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({});\n    service = TestBed.inject(AuthService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n});\n",
          "auth.service.ts": "import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable, NgZone } from '@angular/core';\r\nimport { Observable, catchError, map, of, throwError } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private timeout: any;\r\n  private readonly idleTime: number = 30 * 60 * 1000;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private router: Router,\r\n    private toastr: ToastrService,\r\n    private ngZone: NgZone\r\n  ) {\r\n    this.startIdleWatch();\r\n    this.resetIdleTimer();\r\n  }\r\n\r\n  private apiRequestsCount: number = 0;\r\n  private idleTimeout: any;\r\n\r\n  recuperarContrasena(email: string): Observable<any> {\r\n    const url = `${environment.API_URL}/api/usuario/olvido-contrasena`;\r\n    return this.http.post(url, { email }).pipe(\r\n      map((response) => {\r\n        this.toastr.success('Se ha enviado un enlace para restablecer la contraseña a su correo.');\r\n        return response;\r\n      }),\r\n      catchError((error) => {\r\n        if (error.status === 404 && error.error?.message === 'Usuario no encontrado') {\r\n          this.toastr.error('El correo ingresado no está registrado en el sistema.', 'Error');\r\n        } else if (error.status === 400) {\r\n          this.toastr.error('Hubo un error en la solicitud. Verifique la información ingresada.', 'Error');\r\n        } else {\r\n          console.error('Error al intentar recuperar contraseña:', error);\r\n          this.toastr.error('No se pudo enviar el enlace de restablecimiento. Inténtelo más tarde.', 'Error');\r\n        }\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n\r\n  restablecerContrasena(token: string, nuevaContrasena: string): Observable<any> {\r\n    const url = `${environment.API_URL}/api/usuario/restablecer-contrasena/${token}`;\r\n    return this.http.post(url, { nuevaContrasena }).pipe(\r\n      map(response => {\r\n        this.toastr.success('Contraseña restablecida correctamente.');\r\n        return response;\r\n      }),\r\n      catchError(error => {\r\n        console.error('Error al restablecer la contraseña:', error);\r\n        this.toastr.error('No se pudo restablecer la contraseña. Inténtelo más tarde.');\r\n        return throwError(error);\r\n      })\r\n    );\r\n  }\r\n\r\n  actualizarEmpleado(idEmpleado: number, formData: FormData): Observable<any> {\r\n    const url = `${environment.API_URL}/api/usuario/actualizar-informacion-empleado/${idEmpleado}`;\r\n    return this.http.patch(url, formData).pipe(\r\n      catchError(error => {\r\n        console.error('Error al actualizar los datos del empleado:', error);\r\n        return throwError(error);\r\n      })\r\n    );\r\n  }\r\n\r\n  public startIdleWatch(): void {\r\n    ['mousemove', 'keydown', 'wheel', 'touchmove', 'click'].forEach(event => {\r\n      window.addEventListener(event, () => this.resetIdleTimer());\r\n    });\r\n    this.resetIdleTimer();\r\n  }\r\n\r\n  private resetIdleTimer(): void {\r\n    clearTimeout(this.timeout);\r\n    if (this.apiRequestsCount === 0) {\r\n      this.timeout = setTimeout(() => {\r\n        console.log('Sesión cerrada por inactividad');\r\n        this.handleIdleTimeout();\r\n      }, this.idleTime);\r\n    }\r\n  }\r\n\r\n  // Incrementar el contador cuando se inicia una petición API\r\n  public onApiRequestStart(): void {\r\n    this.apiRequestsCount++;\r\n    clearTimeout(this.idleTimeout); // Pausar el temporizador de inactividad mientras hay solicitudes\r\n  }\r\n\r\n  // Decrementar el contador cuando una petición API termina\r\n  public onApiRequestEnd(): void {\r\n    this.apiRequestsCount--;\r\n    if (this.apiRequestsCount === 0) {\r\n      this.resetIdleTimer(); // Reiniciar el temporizador cuando no hay solicitudes pendientes\r\n    }\r\n  }\r\n\r\n  private handleIdleTimeout(): void {\r\n    this.ngZone.run(() => {\r\n      const token = sessionStorage.getItem('token');\r\n      if (token) {\r\n        this.logout();\r\n      }\r\n    });\r\n  }\r\n\r\n  login(correo: string, contrasena: string): Observable<{ accessToken: string }> {\r\n    const url = `${environment.API_URL}/api/usuario/login`;\r\n    const body = { correo, contrasena };\r\n    return this.http.post<{ accessToken: string }>(url, body).pipe(\r\n      map(response => {\r\n        sessionStorage.setItem('token', response.accessToken);\r\n        return response;\r\n      }),\r\n      catchError(error => {\r\n        console.error('Login failed:', error);\r\n        this.toastr.error('Inicio de sesión fallido', 'Error');\r\n        return throwError(error);\r\n      })\r\n    );\r\n  }\r\n\r\n  logout(): void {\r\n    sessionStorage.removeItem('token');\r\n    this.toastr.info('Sesión cerrada');\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return sessionStorage.getItem('token') !== null;\r\n  }\r\n\r\n  desactivarUsuario(idUsuario: number, fechaReactivacion: Date | null = null): Observable<{ message: string }> {\r\n    const url = `${environment.API_URL}/api/usuario/${idUsuario}/desactivar`;\r\n    const body = { fechaReactivacion };\r\n    return this.http.patch<{ message: string }>(url, body).pipe(\r\n      map(response => {\r\n        this.toastr.success(response.message, 'Desactivación Exitosa');\r\n        return response;\r\n      }),\r\n      catchError(this.handleError<{ message: string }>('desactivarUsuario'))\r\n    );\r\n  }\r\n\r\n  reactivarUsuario(idUsuario: number): Observable<{ message: string }> {\r\n    const url = `${environment.API_URL}/api/usuario/${idUsuario}/reactivar`;\r\n    return this.http.patch<{ message: string }>(url, {}).pipe(\r\n      map(response => {\r\n        this.toastr.success(response.message, 'Reactivación Exitosa');\r\n        return response;\r\n      }),\r\n      catchError(this.handleError<{ message: string }>('reactivarUsuario'))\r\n    );\r\n  }\r\n\r\n  obtenerPerfil(correo: string): Observable<any> {\r\n    return this.http.get<any>(`${environment.API_URL}/api/usuario/perfil?correo=${correo}`);\r\n  }\r\n\r\n  cambiarContrasena(correo: string, nuevaContrasena: string): Observable<any> {\r\n    return this.http.put<any>(`${environment.API_URL}/api/usuario/cambiar-contrasena`, { correo, nuevaContrasena });\r\n  }\r\n\r\n  preRegistro(datos: any): Observable<void> {\r\n    const url = `${environment.API_URL}/api/usuario/preregistro`;\r\n    return this.http.post<void>(url, datos).pipe(\r\n      catchError(this.handleError<void>('preRegistro'))\r\n    );\r\n  }\r\n\r\n  preRegistroAdmin(datos: any): Observable<void> {\r\n    const url = `${environment.API_URL}/api/usuario/preregistro-admin`;\r\n    return this.http.post<void>(url, datos).pipe(\r\n      catchError(this.handleError<void>('preRegistroAdmin'))\r\n    );\r\n  }\r\n\r\n  completarRegistro(token: string, datos: any, archivoIdentificacion?: File, fotoEmpleado?: File): Observable<void> {\r\n    const url = `${environment.API_URL}/api/usuario/completar-registro?token=${token}`;\r\n    const formData = new FormData();\r\n    formData.append('datos', JSON.stringify(datos));\r\n    if (archivoIdentificacion) {\r\n      formData.append('archivo_identificacion', archivoIdentificacion);\r\n    }\r\n    if (fotoEmpleado) {\r\n      formData.append('foto_empleado', fotoEmpleado);\r\n    }\r\n    return this.http.post<void>(url, formData).pipe(\r\n      catchError(this.handleError<void>('completarRegistro'))\r\n    );\r\n  }\r\n\r\n  obtenerUsuarioPorModuloYCentroTrabajo(modulo: string, idCentroTrabajo: number): Observable<any[]> {\r\n    const url = `${environment.API_URL}/api/usuario/modulo-centro-trabajo?modulos=${modulo}&idCentroTrabajo=${idCentroTrabajo}`;\r\n    return this.http.get<any[]>(url).pipe(\r\n      catchError(error => {\r\n        console.error('Error en obtenerUsuarioPorModuloYCentroTrabajo:', error);\r\n        return of([]);\r\n      })\r\n    );\r\n  }\r\n\r\n  obtenerRolesPorModulo(modulo: string): Observable<any[]> {\r\n    const url = `${environment.API_URL}/api/usuario/roles-modulos/${modulo}`;\r\n    return this.http.get<any[]>(url).pipe(\r\n      catchError(this.handleError<any[]>('obtenerRolesPorModulo', []))\r\n    );\r\n  }\r\n\r\n  getUsuarioAutenticado(): { nombre: string, correo: string } | null {\r\n    const token = sessionStorage.getItem('token');\r\n    if (!token) return null;\r\n\r\n    try {\r\n        const decodedToken: any = jwtDecode(token);\r\n        return {\r\n            nombre: decodedToken.nombreEmpleado,\r\n            correo: decodedToken.correo\r\n        };\r\n    } catch (error) {\r\n        console.error('Error al decodificar el token', error);\r\n        return null;\r\n    }\r\n  }\r\n\r\n  getRolesModulos(): { rol: string, modulo: string }[] {\r\n    const token = sessionStorage.getItem('token');\r\n    if (token) {\r\n      const decodedToken: any = jwtDecode(token);\r\n      return decodedToken.rolesModulos || [];\r\n    }\r\n    return [];\r\n  }\r\n\r\n\r\n  getRolesByEmpresa(idEmpresa: number): Observable<any> {\r\n    const url = `${environment.API_URL}/api/usuario/roles?idEmpresa=${idEmpresa}`;\r\n    const token = localStorage.getItem('token');\r\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n    return this.http.get<any>(url, { headers }).pipe(\r\n      catchError(this.handleError<any>('getRolesByEmpresa'))\r\n    );\r\n  }\r\n\r\n  obtenerModulosPorCentroTrabajo(idCentroTrabajo: number): Observable<any[]> {\r\n    return this.http.get<any[]>(`${environment.API_URL}/api/usuario/modulos-centro-trabajo/${idCentroTrabajo}`).pipe(\r\n      catchError((error) => {\r\n        console.error('Error al obtener los módulos:', error);\r\n        return [];\r\n      })\r\n    );\r\n  }\r\n\r\n  obtenerCorreoDelToken(): string | null {\r\n    const token = sessionStorage.getItem('token');\r\n    if (token) {\r\n      const decodedToken: any = jwtDecode(token);\r\n      return decodedToken.correo;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getIdEmpresaFromToken(): number | null {\r\n    const token = sessionStorage.getItem('token');\r\n    if (token) {\r\n      const decodedToken: any = jwtDecode(token);\r\n      return decodedToken.idCentroTrabajo || null;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  clearToken(): void {\r\n    localStorage.removeItem('token');\r\n  }\r\n\r\n  saveToken(token: string): void {\r\n    localStorage.setItem('token', token);\r\n  }\r\n\r\n  getUserRolesAndModules(): { rol: string, modulo: string }[] {\r\n    const token = sessionStorage.getItem('token');\r\n    if (!token) return [];\r\n\r\n    try {\r\n      const decodedToken: any = jwtDecode(token);\r\n      return decodedToken.rolesModulos || [];\r\n    } catch (error) {\r\n      console.error('Error decoding token:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  getUserProfile(): Observable<any> {\r\n    const url = `${environment.API_URL}/api/usuario/perfil`;\r\n    const token = sessionStorage.getItem('token');\r\n\r\n    if (!token) {\r\n      console.error('Token no encontrado en sessionStorage');\r\n      return of(null);\r\n    }\r\n\r\n    const decodedToken = this.decodeToken(token);\r\n\r\n    if (!decodedToken) {\r\n      console.error('Error decodificando el token');\r\n      return of(null);\r\n    }\r\n\r\n    const correo = decodedToken.correo;\r\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n\r\n    return this.http.get<any>(`${url}?correo=${correo}`, { headers }).pipe(\r\n      map(profile => {\r\n        if (profile.empleadoCentroTrabajo.empleado.foto_empleado) {\r\n          profile.empleadoCentroTrabajo.empleado.foto_empleado = this.bufferToBase64(profile.empleadoCentroTrabajo.empleado.foto_empleado.data);\r\n        }\r\n        return profile;\r\n      }),\r\n      catchError(error => {\r\n        console.error('Error obteniendo el perfil del usuario', error);\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n\r\n  bufferToBase64(buffer: ArrayBuffer): string {\r\n    let binary = '';\r\n    const bytes = new Uint8Array(buffer);\r\n    const len = bytes.byteLength;\r\n    for (let i = 0; i < len; i++) {\r\n      binary += String.fromCharCode(bytes[i]);\r\n    }\r\n    return window.btoa(binary);\r\n  }\r\n\r\n\r\n  crearCuenta(data: any): Observable<any> {\r\n    var url = `${environment.API_URL}/api/usuario/auth/signup`;\r\n    return this.http.post<any>(\r\n      url,\r\n      data,\r\n    ).pipe(\r\n      map((res: any) => {\r\n        return res;\r\n      }),\r\n    )\r\n  }\r\n\r\n  confirmarYActualizarSeguridad(data: any): Observable<any> {\r\n    const url = `${environment.API_URL}/api/usuario/auth/confirm`;\r\n    return this.http.patch<any>(url, data).pipe(\r\n      map((res: any) => {\r\n        return res;\r\n      }),\r\n    );\r\n  }\r\n\r\n  /* getRolesExceptAdmin(): Observable<any[]> {\r\n    const url = `${environment.API_URL}/api/usuario/roles`;\r\n    return this.http.get<any[]>(url).pipe(\r\n      map((roles: any[]) => roles.filter(role => role.nombre_rol !== 'ADMINISTRADOR')),\r\n      catchError(error => {\r\n        console.error('Error fetching roles:', error);\r\n        return of([]);\r\n      })\r\n    );\r\n  } */\r\n\r\n  getToken(): string {\r\n    return localStorage.getItem('token') || ''; // O como estés almacenando el token\r\n  }\r\n\r\n  decodeToken(token: string): any {\r\n    try {\r\n      return jwtDecode(token);\r\n    } catch (error) {\r\n      console.error('Error decoding token', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  getCentroTrabajoId(): number | null {\r\n    const token = this.getToken();\r\n    const decodedToken = this.decodeToken(token);\r\n    return decodedToken ? decodedToken.idCentroTrabajo : null;\r\n  }\r\n\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n      console.error(`${operation} failed: ${error.message}`);\r\n      this.toastr.error(`Error en ${operation}: ${error.message}`, 'Error');\r\n      return of(result as T);\r\n    };\r\n  }\r\n}\r\n"
        },
        "shared": {
          "services": {
            "validation.service.ts": "import { Injectable } from '@angular/core';\nimport { AbstractControl, ValidatorFn } from '@angular/forms';\n\n@Injectable({\n  providedIn: 'root',  // disponible en toda la aplicación.\n})\nexport class ValidationService {\n  getErrorMessage(errorKey: string, arg1: any) {\n    throw new Error('Method not implemented.');\n  }\n\n  constructor() { }\n\n  //--------------------------------------------------------\n  codigoAfiliacion(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      const value = control.value || '';\n\n      // Si el valor está vacío, retorna null (válido si el campo vacío es permitido)\n      if (!value) {\n        return null;\n      }\n\n      // Validación: Solo letras y números (sin caracteres especiales ni espacios)\n      if (!/^[a-zA-Z0-9]+$/.test(value)) {\n        return { invalidCharactersCodigo: 'El código solo puede contener letras y números, sin espacios ni caracteres especiales.' };\n      }\n\n      // Validación: No debe tener secuencias consecutivas de más de 4 letras o 4 números\n      if (/([a-zA-Z])\\1{4,}/.test(value)) {\n        return { repeatedLettersCodigo: 'El código no debe contener secuencias consecutivas de más de 4 letras iguales.' };\n      }\n      if (/(\\d)\\1{4,}/.test(value)) {\n        return { repeatedNumbersCodigo: 'El código no debe contener secuencias consecutivas de más de 4 números iguales.' };\n      }\n      return null;  // Si todo es válido, retorna null\n    };\n  }\n\n  // Validación de caracteres especiales y secuencias de letras repetidas\n  noSpecialCharactersOrSequencesValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      const value = control.value || '';\n\n      // Validación: No permitir caracteres especiales no permitidos\n      if (/[^a-zA-ZñÑáéíóúÁÉÍÓÚ0-9\\s.-]/.test(value)) {\n        return { invalidCharacters: true }; // Error si hay caracteres no permitidos\n      }\n\n      // Validación: No permitir un espacio al principio del texto\n      if (/^\\s/.test(value)) {\n        return { leadingSpace: true }; // Error si hay un espacio al principio del texto\n      }\n\n      // Validación: No permitir más de un punto o puntos consecutivos\n      if (value.split('.').length - 1 > 1 || /\\.\\./.test(value)) {\n        return { multipleDots: true }; // Error si hay más de un punto o puntos consecutivos\n      }\n\n      // Validación: No permitir más de un espacio consecutivo\n      if (/\\s{2,}/.test(value)) {\n        return { multipleSpaces: true }; // Error si hay más de un espacio consecutivo\n      }\n\n      // Validación: No permitir más de un guion o guiones mal posicionados\n      if (value.split('-').length - 1 > 1 || /^-/.test(value) || /-$/.test(value) || /--/.test(value)) {\n        return { multipleHyphens: true }; // Error si hay más de un guion o guiones consecutivos\n      }\n\n      // Validación: No permitir secuencias repetidas de más de dos caracteres iguales\n      const regex = /(.)\\1{2,}/;\n      if (regex.test(value)) {\n        return { repeatedSequence: true }; // Error si hay secuencias repetidas de más de dos caracteres\n      }\n      if (/^\\s|\\s$/.test(value)) {\n        return { leadingOrTrailingSpaceName: true }; // Error si hay un espacio al inicio o al final\n      }\n      return null; // Sin errores\n    };\n  }\n\n  //Validacion de Nombres\n  namesValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      const value = control.value || '';\n\n      // Validación: Solo permitir letras (incluyendo acentos), espacios y guiones\n      if (/[^a-zA-ZñÑáéíóúÁÉÍÓÚ\\s-]/.test(value)) {\n        return { invalidNameCharacters: true }; // Error si hay caracteres no permitidos\n      }\n\n      // Validación: No permitir más de un espacio consecutivo\n      if (/\\s{2,}/.test(value)) {\n        return { multipleSpaces: true }; // Error si hay más de un espacio consecutivo\n      }\n\n      // Validación: No permitir más de un guion o guiones al principio o al final\n      if (value.split('-').length - 1 > 1 || /^-/.test(value) || /-$/.test(value) || /--/.test(value)) {\n        return { multipleHyphens: true }; // Error si hay más de un guion o guiones mal posicionados\n      }\n\n      // Validación: No permitir secuencias repetidas de más de dos letras iguales\n      const regex = /(.)\\1{2,}/;\n      if (regex.test(value)) {\n        return { repeatedSequence: true }; // Error si hay secuencias repetidas de más de dos caracteres\n      }\n\n      // Nueva Validación: No permitir espacios al principio o al final del texto\n      if (/^\\s|\\s$/.test(value)) {\n        return { leadingOrTrailingSpaceName: true }; // Error si hay un espacio al inicio o al final\n      }\n      return null; // Sin errores\n    };\n  }\n\n  //RTN VALIDADOR------------------\n  rtnValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      const value = control.value || '';\n\n      // Si el valor está vacío, retorna null (válido si el campo vacío es permitido)\n      if (!value) {\n        return null;\n      }\n\n      // Validación: Debe tener exactamente 14 caracteres\n      if (value.length !== 14) {\n        return { invalidRTNLength: 'El RTN debe tener exactamente 14 caracteres.' };\n      }\n\n      // Validación: Solo debe contener letras y números\n      if (!/^[a-zA-Z0-9]+$/.test(value)) {\n        return { invalidCharactersRTN: 'El RTN solo debe contener letras y números.' };\n      }\n\n      // Validación: No debe haber secuencias repetidas de más de 5 números iguales\n      if (/(\\d)\\1{5,}/.test(value)) {\n        return { repeatedNumbersRTN: 'El RTN no debe contener secuencias repetidas de más de 5 números iguales.' };\n      }\n\n      // Validación de seguridad contra inyecciones SQL y XSS\n      if (/['\"%;)(<>\\\\]/.test(value)) {\n        return { invalidSecurityRTN: 'El RTN contiene caracteres no permitidos por motivos de seguridad.' };\n      }\n      return null;  // Si todo es válido, retorna null\n    };\n  }\n\n  // Validación para teléfonos y celulares\n  phoneValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      const value = control.value || '';\n      if (!/^\\+?[0-9]+$/.test(value)) {\n        return { invalidNumber: true };  // Error si hay caracteres no permitidos\n      }\n      if (value.length > 16) {\n        return { maxLengthExceeded: true };  // Error si excede los 16 caracteres\n      }\n      if (value.length < 8) {\n        return { minLengthNotMet: true };  // Error si tiene menos de 8 caracteres\n      }\n      if (/--/.test(value)) {\n        return { multipleHyphens: true };  // Error si hay guiones seguidos\n      }\n      return null;\n    };\n  }\n\n  // Validación opcional para teléfonos\n  phoneValidatorOptional(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      const value = control.value || '';\n\n      if (!value) {\n        return null;  // Si está vacío, no hay error (número opcional)\n      }\n\n      // Modificación: Permite solo números, sin signos \"+\" ni otros caracteres\n      if (!/^[0-9]+$/.test(value)) {\n        return { invalidNumberOpc: true };  // Error si hay caracteres no permitidos\n      }\n\n      if (value.length > 16) {\n        return { maxLengthExceededOpc: true };  // Error si excede los 16 caracteres\n      }\n\n      if (value.length < 8) {\n        return { minLengthNotMetOpc: true };  // Error si tiene menos de 8 caracteres\n      }\n      return null;\n    };\n  }\n  // Validación de DNI\n  dniValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      const value = control.value || '';\n      if (!/^\\d+$/.test(value)) {\n        return { invalidCharactersDNI: 'El DNI solo puede contener números.' };\n      }\n      if (value.length !== 13) {\n        return { invalidDniLength: 'El DNI debe tener exactamente 13 dígitos.' };\n      }\n      return null;\n    };\n  }\n\n  // Validación para Número de empleados\n  numberValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      const value = control.value || '';\n      if (!/^\\+?[0-9]+$/.test(value)) {\n        return { invalidCharacters: true };  // Error si hay caracteres no permitidos\n      }\n      if (value.length > 16) {\n        return { maxLengthExceeded: true };  // Error si excede los 16 caracteres\n      }\n      if (Number(value) < 0) {\n        return { minValueNotMet: true };  // Error si es menor que 0\n      }\n      if (/\\+\\+/.test(value)) {\n        return { consecutiveSpecialCharacters: true };  // Error si hay caracteres especiales consecutivos\n      }\n      return null;\n    };\n  }\n\n  //Validación para Números de Casas\n  houseNumberValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      const value = control.value || '';\n\n      // Validación 1: No permitir espacios en blanco\n      if (/\\s/.test(value)) {\n        return { noSpacesAllowed: true };  // Error si hay espacios en blanco\n      }\n\n      // Validación 2: Permitir solo hasta 2 letras en cualquier parte, y el resto números (máximo 6 caracteres)\n      if (!/^[a-zA-Z0-9]{1,6}$/.test(value)) {\n        return { invalidCharacters: true };  // Error si contiene caracteres especiales\n      }\n\n      // Validación 3: Verificar que tenga hasta 2 letras en cualquier parte y el resto números\n      const letterCount = (value.match(/[a-zA-Z]/g) || []).length;\n      if (letterCount > 2) {\n        return { tooManyLetters: true };  // Error si hay más de 2 letras\n      }\n      return null;  // Si no hay errores, retornar null\n    };\n  }\n\n  // Validación para Número de acuerdos\n  validacionNumeroAcuerdo(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      const value = control.value || '';\n      if (/[^a-zA-Z0-9\\-\\/]/.test(value)) {\n        return { invalidCharacters: true };  // Error si hay caracteres no permitidos\n      }\n      if (value.length > 50) {\n        return { maxLengthExceeded: true };  // Error si excede los 50 caracteres\n      }\n      if (/--/.test(value)) {\n        return { multipleHyphens: true };  // Error si hay guiones seguidos\n      }\n      if (/\\/\\//.test(value)) {\n        return { multipleSlashesAgree: true };  // Error si hay barras seguidas\n      }\n      if (/(.)\\1{3}/.test(value)) {\n        return { repeatedCharactersAgree: true };  // Error si hay más de dos letras repetidas\n      }\n      return null;\n    };\n  }\n\n  // Validación para Correo Electrónico\n  emailValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      const value = control.value || '';\n\n      // Validación 1: No permitir espacios en blanco al principio o final\n      if (/^\\s|\\s$/.test(value)) {\n        return { leadingOrTrailingSpace: true }; // Error si hay espacios al inicio o al final\n      }\n\n      // Validación 2: Validar formato básico de correo electrónico\n      const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n      if (!emailRegex.test(value)) {\n        return { invalidEmail: true }; // Error si el correo no tiene un formato válido\n      }\n\n      // Validación 3: Longitud máxima de 64 caracteres\n      if (value.length > 64) {\n        return { maxLengthExceeded: true }; // Error si excede los 64 caracteres\n      }\n      return null; // Si no hay errores, retornar null\n    };\n  }\n  // Validación para Correo Opcional\n  emailOptionalValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      const value = control.value || '';\n\n      // Si el campo está vacío, no aplicar ninguna validación\n      if (!value) {\n        return null; // Campo opcional, si está vacío no hay errores\n      }\n\n      // Validación 1: No permitir espacios en blanco al principio o final\n      if (/^\\s|\\s$/.test(value)) {\n        return { leadingOrTrailingSpace: true }; // Error si hay espacios al inicio o al final\n      }\n\n      // Validación 2: Validar formato básico de correo electrónico\n      const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n      if (!emailRegex.test(value)) {\n        return { invalidEmail: true }; // Error si el correo no tiene un formato válido\n      }\n\n      // Validación 3: Longitud máxima de 64 caracteres\n      if (value.length > 64) {\n        return { maxLengthExceeded: true }; // Error si excede los 64 caracteres\n      }\n      return null; // Si no hay errores, retornar null\n    };\n  }\n\n  //--------------------------------------------\n  // Validación para números de mes (1-12)\n  monthValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      const value = control.value || '';\n\n      // Si el valor está vacío, es válido (asumiendo que no es requerido)\n      if (!value) {\n        return null;\n      }\n\n      // Validación: Solo permitir números entre 1 y 12\n      const month = Number(value);\n      if (isNaN(month) || month < 1 || month > 12) {\n        return { invalidMonth: 'El número ingresado no corresponde a un mes válido (1-12).' };\n      }\n\n      return null; // Sin errores si el número está entre 1 y 12\n    };\n  }\n\n  //--------------------------------------------\n  yearValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      const value = control.value || '';\n\n      // Validación: Solo números\n      if (!/^\\d+$/.test(value)) {\n        return { invalidCharactersYear: 'El año solo puede contener números.' };\n      }\n\n      // Validación: No más de 4 dígitos\n      if (value.length > 4) {\n        return { maxLengthExceededYear: 'El año no puede tener más de 4 dígitos.' };\n      }\n\n      // Validación: No permitir años mayores al actual\n      const currentYear = new Date().getFullYear();\n      if (Number(value) > currentYear) {\n        return { yearTooNew: `El año no puede ser mayor al ${currentYear}.` };\n      }\n\n      return null; // Sin errores\n    };\n  }\n\n  /*|---------------------------------------------------------------|\n    |---- FUNCIÓN: Obtener mensajes de error para los controles ----|\n    |---------------------------------------------------------------|*/\n  getErrorMessages(control: AbstractControl): string[] {\n    const messages: string[] = [];\n\n    if (control.hasError('required')) {\n      messages.push('Este campo es requerido.');\n    }\n    if (control.hasError('invalidRTNLength')) {\n      messages.push('El RTN debe tener exactamente 14 caracteres.');\n    }\n    if (control.hasError('invalidCharactersRTN')) {\n      messages.push('El RTN está en un formato inválido.');\n    }\n    if (control.hasError('repeatedNumbersRTN')) {\n      messages.push('El RTN no debe contener secuencias repetidas de más de 5 números iguales.');\n    }\n    if (control.hasError('invalidSecurityRTN')) {\n      messages.push('El RTN contiene caracteres no permitidos por motivos de seguridad.');\n    }\n    if (control.hasError('invalidCharactersCodigo')) {\n      messages.push('El código solo puede contener letras y números, sin espacios ni caracteres especiales.');\n    }\n    if (control.hasError('repeatedLettersCodigo')) {\n      messages.push('El código no debe contener secuencias consecutivas de letras iguales.');\n    }\n    if (control.hasError('repeatedNumbersCodigo')) {\n      messages.push('El código no debe contener secuencias consecutivas.');\n    }\n    if (control.hasError('maxlength')) {\n      messages.push('Ha excedido el número máximo de caracteres.');\n    }\n    if (control.hasError('multipleSpaces')) {\n      messages.push('No se permiten espacios consecutivos.');\n    }\n    if (control.hasError('invalidCharacters')) {\n      messages.push('No se permiten caracteres inválidos.');\n    }\n    if (control.hasError('multipleHyphens')) {\n      messages.push('No se permiten guiones consecutivos.');\n    }\n    if (control.hasError('invalidDniLength')) {\n      messages.push('Longitud incorrecta del campo.');\n    }\n    if (control.hasError('invalidCharactersDNI')) {\n      messages.push('Formato inválido. Solo se aceptan números.');\n    }\n    if (control.hasError('multipleDots')) {\n      messages.push('Solo se permite un punto y no debe ser consecutivo.');\n    }\n    if (control.hasError('email')) {\n      messages.push('Correo electrónico inválido.');\n    }\n    if (control.hasError('invalidNumber')) {\n      messages.push('Solo se permiten números o el signo \"+\" al inicio.');\n    }\n    //----------------------------------\n    if (control.hasError('invalidNumberOpc')) {\n      messages.push('El número telefónico solo puede contener dígitos numéricos.');\n    }\n    if (control.hasError('maxLengthExceededOpc')) {\n      messages.push('El número no puede tener más de 16 caracteres.');\n    }\n    if (control.hasError('minLengthNotMetOpc')) {\n      messages.push('El número debe tener al menos 8 caracteres.');\n    }\n    //----------------------------------\n    if (control.hasError('repeatedCharactersAgree')) {\n      messages.push('Secuencia de letras inválida.');\n    }\n    if (control.hasError('minLengthNotMet')) {\n      messages.push('Debe tener al menos 8 dígitos.');\n    }\n    if (control.hasError('invalidNameCharacters')) {\n      messages.push('Solo se permiten letras.');\n    }\n    if (control.hasError('maxLengthExceeded')) {\n      messages.push('Ha excedido el número máximo de caracteres.');\n    }\n    if (control.hasError('repeatedSequence')) {\n      messages.push('No se permiten secuencias de letras repetidas.');\n    }\n    if (control.hasError('minValueNotMet')) {\n      messages.push('El valor no puede ser menor a 0.');\n    }\n    if (control.hasError('multipleSlashesAgree')) {\n      messages.push('No se acepta este formato.');\n    }\n    if (control.hasError('noSpacesAllowed')) {\n      messages.push('No se permiten espacios en el número de casa.');\n    }\n    if (control.hasError('invalidCharacters')) {\n      messages.push('Ingrese correctamente.');\n    }\n    if (control.hasError('tooManyLetters')) {\n      messages.push('El número de casa no puede tener más de 2 letras.');\n    }\n    if (control.hasError('leadingSpace')) {\n      messages.push('El campo no debe comenzar con un espacio.');\n    }\n    if (control.hasError('leadingOrTrailingSpace')) {\n      messages.push('El campo no debe tener espacios al principio o al final.');\n    }\n    if (control.hasError('invalidEmail')) {\n      messages.push('El formato del correo no es válido.');\n    }\n    if (control.hasError('leadingOrTrailingSpaceName')) {\n      messages.push('El campo no debe comenzar o terminar con un espacio.');\n    }\n    if (control.hasError('invalidMonth')) {\n      messages.push('El número ingresado no corresponde a un mes válido (1-12).');\n    }\n    if (control.hasError('invalidCharactersYear')) {\n      messages.push('El año solo puede contener números.');\n    }\n    if (control.hasError('maxLengthExceededYear')) {\n      messages.push('El año no puede tener más de 4 dígitos.');\n    }\n    if (control.hasError('yearTooNew')) {\n      messages.push('El año no puede ser mayor al actual.');\n    }\n    return messages;\n  }\n}\n"
          },
          "shared.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';  // Asegúrate de importar esto\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { NgScrollbarModule } from 'ngx-scrollbar';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { GoogleMapsModule } from '@angular/google-maps';\r\n\r\n// Importa el componente de mensajes de error\r\nimport { ErrorMessagesComponent } from './error-messages/error-messages.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ErrorMessagesComponent,  // Declara el componente\r\n  ],\r\n  imports: [\r\n    CommonModule,  // Importa CommonModule aquí para usar *ngIf\r\n    MatNativeDateModule,\r\n    MatButtonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSnackBarModule,\r\n    MatSidenavModule,\r\n    MatProgressSpinnerModule,\r\n    MatGridListModule,\r\n    MatCheckboxModule,\r\n    MatToolbarModule,\r\n    MatMenuModule,\r\n    LayoutModule,\r\n    MatListModule,\r\n    MatPaginatorModule,\r\n    MatDatepickerModule,\r\n    MatSlideToggleModule,\r\n    MatCardModule,\r\n    MatRadioModule,\r\n    MatDialogModule,\r\n    MatSelectModule,\r\n    NgScrollbarModule,\r\n    MatTableModule,\r\n    MatStepperModule,\r\n    MatTabsModule,\r\n  ],\r\n  exports: [\r\n    ErrorMessagesComponent,  \r\n    CommonModule,  // Exporta CommonModule si es necesario\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSnackBarModule,\r\n    MatSidenavModule,\r\n    MatProgressSpinnerModule,\r\n    MatGridListModule,\r\n    MatCheckboxModule,\r\n    MatToolbarModule,\r\n    MatMenuModule,\r\n    LayoutModule,\r\n    MatListModule,\r\n    MatPaginatorModule,\r\n    MatDatepickerModule,\r\n    MatSlideToggleModule,\r\n    MatCardModule,\r\n    MatRadioModule,\r\n    MatDialogModule,\r\n    MatSelectModule,\r\n    NgScrollbarModule,\r\n    MatTableModule,\r\n    MatStepperModule,\r\n    MatTabsModule,\r\n  ]\r\n})\r\nexport class SharedModule { }\r\n"
        },
        "views": {
          "views-routing.module.ts": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DashboardComponent } from './dashboard/dashboard.component';\n\n\nconst routes: Routes = [\n  { path: 'dashboard', component: DashboardComponent },\n  { path: '**', redirectTo: 'dashboard', pathMatch: 'prefix' }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ViewsRoutingModule { }\n",
          "views.module.ts": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MaterialAngularModule } from '../material-angular/material-angular.module';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { ViewsRoutingModule } from './views-routing.module';\n\n@NgModule({\n  declarations: [\n    DashboardComponent\n  ],\n  imports: [\n    CommonModule,\n    MaterialAngularModule,\n    ViewsRoutingModule\n  ]\n})\nexport class ViewsModule { }\n"
        }
      }
    }
  }
}